services:
  backend:
    build:
      context: ./src/backend
    container_name: backend_service
    ports:
      - "4000:4000"
    volumes:
      - ./src/backend:/app
      - ./src/common:/app/common
    environment:
      - FLASK_ENV=production
    depends_on:
      - qdrant
    #   - redis
    networks:
      - app-network

  frontend:
    build:
      context: ./src/frontend
    container_name: frontend_service
    ports:
      - "8501:8501"
    volumes:
      - ./src/frontend:/app
      - ./src/common:/app/common
    depends_on:
      - backend
    networks:
      - app-network

  qdrant:
    image: qdrant/qdrant
    restart: always
    container_name: qdrant_service
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes: 
      - ./qdrant_data:/qdrant/storage
    networks:
      - app-network
    
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
    - ./src/frontend/nginx/config.d:/etc/nginx/conf.d
    - ./src/frontend/credential/fullchain.pem:/etc/letsencrypt/live/dylim.dev/fullchain.pem:ro
    - ./src/frontend/credential/privkey.pem:/etc/letsencrypt/live/dylim.dev/privkey.pem:ro

    depends_on:
      - backend
      - frontend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

  # redis:
  #   image: "redis:alpine"
  #   container_name: redis_service

  # celery_worker:
  #   build:
  #     context: ./src/backend
  #   command: celery -A service.celery_worker.celery worker --loglevel=info
  #   container_name: celery_worker_service
  #   volumes:
  #     - ./src/backend:/app
  #     - ./src/common:/app/common
  #   depends_on:
  #     - redis